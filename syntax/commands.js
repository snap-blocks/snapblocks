export default [
  {
    id: "MOTION_MOVESTEPS",
    selector: "forward:",
    snap: "forward",
    spec: "move %1 steps",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_TURNRIGHT",
    snap: "turn",
    selector: "turnRight:",
    spec: "turn @clockwise %1 degrees",
    aliases: ["turn @turnRight %1 degrees"],
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_TURNLEFT",
    snap: "turnLeft",
    selector: "turnLeft:",
    spec: "turn @counterclockwise %1 degrees",
    aliases: ["turn @turnLeft %1 degrees"],
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_POINTINDIRECTION",
    snap: "setHeading",
    selector: "heading:",
    spec: "point in direction %1",
    inputs: ["%d.direction"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_POINTTOWARDS",
    snap: "doFaceTowards",
    selector: "pointTowards:",
    spec: "point towards %1",
    inputs: ["%m.spriteOrMouse"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_GOTOXY",
    snap: "gotoXY",
    selector: "gotoX:y:",
    spec: "go to x:%1 y:%2",
    inputs: ["%n", "%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_GOTO",
    snap: "doGotoObject",
    selector: "gotoSpriteOrMouse:",
    spec: "go to %1",
    inputs: ["%m.location"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_GLIDESECSTOXY",
    snap: "doGlide",
    selector: "glideSecs:toX:y:elapsed:from:",
    spec: "glide %1 secs to x:%2 y:%3",
    inputs: ["%n", "%n", "%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_GLIDETO",
    spec: "glide %1 secs to %2",
    inputs: ["%n", "%m.location"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_CHANGEXBY",
    snap: "changeXPosition",
    selector: "changeXposBy:",
    spec: "change x by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_SETX",
    snap: "setXPosition",
    selector: "xpos:",
    spec: "set x to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_CHANGEYBY",
    snap: "changeYPosition",
    selector: "changeYposBy:",
    spec: "change y by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_SETY",
    snap: "setYPosition",
    selector: "ypos:",
    spec: "set y to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "MOTION_SETROTATIONSTYLE",
    selector: "setRotationStyle",
    spec: "set rotation style %1",
    inputs: ["%m.rotationStyle"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "LOOKS_SAYFORSECS",
    snap: "doSayFor",
    selector: "say:duration:elapsed:from:",
    spec: "say %1 for %2 seconds",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_SAY",
    snap: "bubble",
    selector: "say:",
    spec: "say %1",
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_THINKFORSECS",
    snap: "doThinkFor",
    selector: "think:duration:elapsed:from:",
    spec: "think %1 for %2 seconds",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_THINK",
    snap: "doThink",
    selector: "think:",
    spec: "think %1",
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
  },
  {
    snap: "reportGetImageAttribute",
    spec: "%1 of costume %2",
    inputs: ["%s", "%m.costume"],
    shape: "reporter",
    category: "looks",
  },
  {
    snap: "reportNewCostumeStretched",
    spec: "stretch %1 x: %2 y: %3 %",
    inputs: ["%m.costume", "%n", "%n"],
    shape: "reporter",
    category: "looks",
  },
  {
    snap: "reportNewCostumeSkewed",
    spec: "skew %1 to %2 degrees %3 %",
    inputs: ["%m.costume", "%n", "%n"],
    shape: "reporter",
    category: "looks",
  },
  {
    snap: "reportNewCostume",
    spec: "new costume {list} width %2 height %3",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m.list", "%n", "%n"],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "LOOKS_SHOW",
    selector: "show",
    snap: "show",
    spec: "show",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_HIDE",
    selector: "hide",
    snap: "hide",
    spec: "hide",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    snap: "reportShown",
    spec: "shown?",
    shape: "boolean",
    category: "looks",
  },
  {
    id: "LOOKS_SWITCHCOSTUMETO",
    selector: "lookLike:",
    spec: "switch costume to %1",
    inputs: ["%m.costume"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_NEXTCOSTUME",
    snap: "doWearNextCostume",
    selector: "nextCostume",
    spec: "next costume",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_NEXTBACKDROP_BLOCK",
    selector: "nextScene",
    spec: "next backdrop",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_SWITCHBACKDROPTO",
    selector: "startScene",
    spec: "switch backdrop to %1",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_SWITCHBACKDROPTOANDWAIT",
    selector: "startSceneAndWait",
    spec: "switch backdrop to %1 and wait",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_CHANGEEFFECTBY",
    snap: "changeEffect",
    selector: "changeGraphicEffect:by:",
    spec: "change %1 effect by %2",
    inputs: ["%m.effect", "%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_SETEFFECTTO",
    snap: "setEffect",
    selector: "setGraphicEffect:to:",
    spec: "set %1 effect to %2",
    inputs: ["%m.effect", "%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_CLEARGRAPHICEFFECTS",
    snap: "clearEffects",
    selector: "filterReset",
    spec: "clear graphic effects",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    snap: "getEffect",
    spec: "%1 effect",
    inputs: ["%m.effect"],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "LOOKS_CHANGESIZEBY",
    snap: "changeScale",
    selector: "changeSizeBy:",
    spec: "change size by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_SETSIZETO",
    snap: "setScale",
    selector: "setSizeTo:",
    spec: "set size to %1%",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
  },
  {
    selector: "comeToFront",
    spec: "go to front",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_GOTOFRONTBACK",
    snap: "goToLayer",
    spec: "go to %1 layer",
    inputs: ["%m"],
    shape: "stack",
    category: "looks",
  },
  {
    selector: "goBackByLayers:",
    snap: "goBack",
    spec: "go back %1 layers",
    inputs: ["%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "LOOKS_GOFORWARDBACKWARDLAYERS",
    spec: "go %1 %2 layers",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "snap:log",
    snap: "log",
    spec: "console log {closed}",
    specDefs: {
      closed: [
        "%1",
        "input list: %1",
        "@verticalEllipsis @addInput",
        "@addInput",
        "{info}",
      ],
      info: [
        "%1 {info}",
        "%1 @delInput @addInput",
        "%1 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "snap:alert",
    snap: "alert",
    spec: "alert {closed}",
    specDefs: {
      closed: [
        "%1",
        "input list: %1",
        "@verticalEllipsis @addInput",
        "@addInput",
        "{info}",
      ],
      info: [
        "%1 {info}",
        "%1 @delInput @addInput",
        "%1 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s"],
    shape: "stack",
    category: "looks",
  },
  {
    snap: "doScreenshot",
    spec: "save %1 as costume named %2",
    inputs: ["%m", "%s"],
    shape: "stack",
    category: "looks",
  },
  {
    id: "SOUND_PLAY",
    selector: "playSound:",
    snap: "playSound",
    spec: "start sound %1",
    inputs: ["%m.sound"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "SOUND_CHANGEEFFECTBY",
    spec: "change %1 effect by %2",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "SOUND_SETEFFECTO", // sic
    spec: "set %1 effect to %2",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "SOUND_CLEAREFFECTS",
    spec: "clear sound effects",
    inputs: [],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "changePan",
    spec: "change balance by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "setPan",
    spec: "set balance to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "getPan",
    spec: "balance",
    shape: "reporter",
    category: "sound",
  },
  {
    id: "SOUND_PLAYUNTILDONE",
    selector: "doPlaySoundAndWait",
    snap: "doPlaySoundUntilDone",
    spec: "play sound %1 until done",
    inputs: ["%m.sound"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "SOUND_STOPALLSOUNDS",
    selector: "stopAllSounds",
    snap: "doStopAllSounds",
    spec: "stop all sounds",
    inputs: [],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "doPlaySoundAtRate",
    spec: "play sound %1 at %2 Hz",
    inputs: ["%m.sound", "%n"],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "playFreq",
    spec: "play frequency %1 Hz",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "stopFreq",
    spec: "stop frequency",
    inputs: [],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "doPlayFrequency",
    spec: "play %1 hz for %2 secs",
    inputs: ["%n", "%n"],
    shape: "stack",
    category: "sound",
  },
  {
    snap: "reportGetSoundAttribute",
    spec: "%1 of sound %2",
    inputs: ["%s", "%m.sound"],
    shape: "reporter",
    category: "sound",
  },
  {
    snap: "reportNewSoundFromSamples",
    spec: "new sound {list} rate %2 Hz",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%s", "%n"],
    shape: "reporter",
    category: "sound",
  },
  {
    id: "music.playDrumForBeats",
    selector: "playDrum",
    spec: "play drum %1 for %2 beats",
    inputs: ["%d.drum", "%n"],
    shape: "stack",
    category: "music",
  },
  {
    id: "music.restForBeats",
    selector: "rest:elapsed:from:",
    snap: "doRest",
    spec: "rest for %1 beats",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
  },
  {
    id: "music.playNoteForBeats",
    selector: "noteOn:duration:elapsed:from:",
    snap: "doPlayNote",
    spec: "play note %1 for %2 beats",
    inputs: ["%d.note", "%n"],
    shape: "stack",
    category: "music",
  },
  {
    id: "music.setInstrument",
    selector: "instrument:",
    snap: "doSetInstrument",
    spec: "set instrument to %1",
    inputs: ["%d.instrument"],
    shape: "stack",
    category: "music",
  },
  {
    id: "SOUND_CHANGEVOLUMEBY",
    selector: "changeVolumeBy:",
    snap: "changeVolume",
    spec: "change volume by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "SOUND_SETVOLUMETO",
    selector: "setVolumeTo:",
    snap: "setVolume",
    spec: "set volume to %1%",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "music.changeTempo",
    selector: "changeTempoBy:",
    snap: "doChangeTempo",
    spec: "change tempo by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
  },
  {
    selector: "setTempoTo:",
    spec: "set tempo to %1 bpm",
    snap: "doSetTempo",
    inputs: ["%n"],
    shape: "stack",
    category: "sound",
  },
  {
    id: "music.setTempo",
    selector: "setTempoTo:",
    spec: "set tempo to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "music",
  },
  {
    id: "pen.clear",
    selector: "clearPenTrails",
    snap: "clear",
    spec: "erase all",
    inputs: [],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.stamp",
    selector: "stampCostume",
    snap: "doStamp",
    spec: "stamp",
    inputs: [],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "doFill",
    spec: "fill",
    shape: "stack",
    category: "pen",
  },
  {
    snap: "write",
    spec: "write %1 size %2",
    inputs: ["%s", "%n"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "reportPenTrailsAsCostume",
    spec: "pen trails",
    shape: "reporter",
    category: "pen",
  },
  {
    snap: "reportPentrailsAsSVG",
    spec: "pen vectors",
    shape: "reporter",
    category: "pen",
  },
  {
    snap: "doPasteOn",
    spec: "paste on %1",
    inputs: ["%m.sprite"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "doCutFrom",
    spec: "cut from %1",
    inputs: ["%m.sprite"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.penDown",
    selector: "putPenDown",
    spec: "pen down",
    snap: "down",
    inputs: [],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.penUp",
    selector: "putPenUp",
    spec: "pen up",
    snap: "up",
    inputs: [],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "getPenDown",
    spec: "pen down?",
    shape: "boolean",
    category: "pen",
  },
  {
    id: "pen.setColor",
    selector: "penColor:",
    snap: "setColor",
    spec: "set pen color to %1",
    inputs: ["%c"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "setBackgroundColor",
    spec: "set background color to %1",
    inputs: ["%c"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.changeHue",
    selector: "changePenHueBy:",
    spec: "change pen color by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.setColorParam",
    snap: "setPenColorDimension",
    spec: "set pen %1 to %2",
    inputs: ["%m.color", "%c"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "setBackgroundColorDimension",
    spec: "set background %1 to %2",
    inputs: ["%m.color", "%c"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.changeColorParam",
    snap: "changePenColorDimension",
    spec: "change pen %1 by %2",
    inputs: ["%m.color", "%n"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "changeBackgroundColorDimension",
    spec: "change background %1 by %2",
    inputs: ["%m.color", "%n"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.setHue",
    selector: "setPenHueTo:",
    spec: "set pen color to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.changeShade",
    selector: "changePenShadeBy:",
    spec: "change pen shade by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.setShade",
    selector: "setPenShadeTo:",
    spec: "set pen shade to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "getPenAttribute",
    spec: "pen %1",
    inputs: ["%m.color"],
    shape: "reporter",
    category: "pen",
  },
  {
    id: "pen.changeSize",
    selector: "changePenSizeBy:",
    snap: "changeSize",
    spec: "change pen size by %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    id: "pen.setSize",
    selector: "penSize:",
    snap: "setSize",
    spec: "set pen size to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "pen",
  },
  {
    snap: "reportColor",
    spec: "color %1",
    inputs: ["%clr"],
    shape: "reporter",
    category: "pen",
  },
  {
    snap: "reportColorAttribute",
    spec: "%1 of color %2",
    inputs: ["%m", "%clr"],
    shape: "reporter",
    category: "pen",
  },
  {
    snap: "reportNewColor",
    spec: "new color {color}",
    specDefs: {
      variadic: [
        "@delInput @verticalEllipsis @addInput",
        "@delInput @addInput",
      ],
      color: [
        "@addInput",
        "@verticalEllipsis @addInput",
        "hue %1 {variadic}",
        "hue %1 {saturation}",
      ],
      saturation: [
        "saturation %2 {variadic}",
        "saturation %2 {brightness}",
      ],
      brightness: [
        "brightness %3 {variadic}",
        "brightness %3 {transparency}",
      ],
      transparency: [
        "transparency %4 @delInput @verticalEllipsis",
        "transparency %4 @delInput",
      ]
    },
    inputs: ["%n", "%n", "%n"],
    shape: "reporter",
    category: "pen",
  },
  {
    id: "EVENT_WHENFLAGCLICKED",
    selector: "whenGreenFlag",
    spec: "when @greenFlag clicked",
    inputs: [],
    shape: "hat",
    santa: "hat",
    category: "events",
  },
  {
    id: "EVENT_WHENKEYPRESSED",
    selector: "whenKeyPressed",
    spec: "{spec}",
    specDefs: {
      spec: ["when %1 key pressed", "when %1 key pressed {data}"],
      data: ["", "@addInput", "%2 @delInput"],
    },
    inputs: ["%m.key"],
    shape: "hat",
    santa: "trumpet",
    category: "events",
  },
  {
    id: "snap:receiveInteraction",
    snap: "receiveInteraction",
    spec: "when I am %1",
    inputs: ["%m"],
    shape: "hat",
    santa: "star",
    category: "events",
  },
  {
    id: "snap:receiveCondition",
    snap: "receiveCondition",
    spec: "when %1",
    inputs: ["%b"],
    shape: "hat",
    santa: "candles",
    category: "events",
  },
  {
    id: "EVENT_WHENTHISSPRITECLICKED",
    selector: "whenClicked",
    spec: "when this sprite clicked",
    inputs: [],
    shape: "hat",
    category: "events",
  },
  {
    selector: "whenSprite1Clicked",
    spec: "when Sprite1 clicked",
    inputs: [],
    shape: "hat",
    category: "events",
  },
  {
    id: "EVENT_WHENSTAGECLICKED",
    spec: "when stage clicked",
    inputs: [],
    shape: "hat",
    category: "events",
  },
  {
    id: "EVENT_WHENBACKDROPSWITCHESTO",
    selector: "whenSceneStarts",
    spec: "when backdrop switches to %1",
    inputs: ["%m.backdrop"],
    shape: "hat",
    category: "events",
  },
  {
    id: "EVENT_WHENGREATERTHAN",
    selector: "whenSensorGreaterThan",
    spec: "when %1 > %2",
    inputs: ["%m.triggerSensor", "%n"],
    shape: "hat",
    category: "events",
  },
  {
    id: "EVENT_WHENBROADCASTRECEIVED",
    selector: "whenIReceive",
    snap: "receiveMessage",
    spec: "when I receive {data}",
    specDefs: {
      data: ["%1", "%1 @addInput", "%1 %2 @delInput"],
    },
    inputs: ["%m.broadcast"],
    shape: "hat",
    santa: "gift",
    category: "events",
  },
  // {
  //   id: "snap:receiveMessage",
  //   snap: "receiveMessage",
  //   spec: "when I receive %1 {data}",
  //   specDefs: {
  //     data: ["@addInput", "%2 @delInput"],
  //   },
  //   inputs: ["%m.broadcast", "%s"],
  //   shape: "hat",
  //   category: "events",
  // },
  {
    id: "EVENT_BROADCAST",
    selector: "broadcast:",
    spec: "broadcast %1",
    inputs: ["%m.broadcast"],
    shape: "stack",
    category: "events",
  },
  {
    id: "snap:doBroadcast",
    snap: "doBroadcast",
    spec: "broadcast %1 {receiver}",
    specDefs: {
      receiver: ["", "@addInput", "to %2 {data}"],
      data: ["@delInput @addInput", "with data %3 @delInput"],
    },
    inputs: ["%m.broadcast", "%m.sprite", "%s"],
    shape: "stack",
    category: "events",
  },
  {
    id: "EVENT_BROADCASTANDWAIT",
    selector: "doBroadcastAndWait",
    spec: "broadcast %1 and wait",
    inputs: ["%m.broadcast"],
    shape: "stack",
    category: "events",
  },
  {
    snap: "doBroadcastAndWait",
    spec: "broadcast %1 {receiver} and wait",
    specDefs: {
      receiver: ["", "@addInput", "to %2 {data}"],
      data: ["@delInput @addInput", "with data %3 @delInput"],
    },
    inputs: ["%m.broadcast", "%m.sprite", "%s"],
    shape: "stack",
    category: "events",
  },
  {
    snap: "reportPoll",
    spec: "request %1 {receiver}",
    specDefs: {
      receiver: ["@addInput", "from %2 {data}"],
      data: ["@delInput @addInput", "with data %3 @delInput"],
    },
    inputs: ["%m.broadcast", "%m.sprite", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    snap: "doSend",
    spec: "send %1 to %2",
    inputs: ["%m.messages", "%m.sprites"],
    shape: "stack",
    category: "events",
  },
  {
    id: "EVENT_WHENTOUCHINGOBJECT",
    spec: "when sprite touches %1",
    inputs: ["%m"],
    shape: "hat",
    category: "events",
  },
  {
    snap: "doWarp",
    spec: "warp %1",
    inputs: ["%cs"],
    shape: "stack",
    category: "other",
  },
  {
    id: "CONTROL_WAIT",
    selector: "wait:elapsed:from:",
    snap: "doWait",
    spec: "wait %1 seconds",
    inputs: ["%n"],
    shape: "stack",
    category: "control",
  },
  {
    id: "CONTROL_REPEAT",
    selector: "doRepeat",
    snap: "doRepeat",
    spec: "repeat %1 %2",
    inputs: ["%n", "%cs"],
    shape: "stack",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "CONTROL_FOREVER",
    selector: "doForever",
    snap: "doForever",
    spec: "forever %1",
    inputs: ["%cs"],
    shape: "cap",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "CONTROL_IF",
    selector: "doIf",
    spec: "if %1 then %2",
    inputs: ["%b", "%cs"],
    shape: "stack",
    category: "control",
  },
  {
    id: "CONTROL_ELSE",
    spec: "if %1 then %2 else %3",
    inputs: ["%b", "%cs", "%cs"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:doIfElse",
    snap: "doIfElse",
    spec: "if %1 %2 else %3",
    inputs: ["%b", "%cs", "%cs"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:reportIfElse",
    snap: "reportIfElse",
    spec: "if %1 then %2 else %3",
    inputs: ["%b", "%s", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "CONTROL_WAITUNTIL",
    selector: "doWaitUntil",
    snap: "doWaitUntil",
    spec: "wait until %1",
    inputs: ["%b"],
    shape: "stack",
    category: "control",
  },
  {
    id: "CONTROL_REPEATUNTIL",
    selector: "doUntil",
    snap: "doUntil",
    spec: "repeat until %1 %2",
    inputs: ["%b", "%cs"],
    shape: "stack",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "snap:doFor",
    snap: "doFor",
    spec: "for %1 = %2 to %3 %4",
    inputs: ["%s", "%n", "%n", "%cs"],
    shape: "stack",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "snap:doReport",
    spec: "report %1",
    inputs: ["%s"],
    shape: "cap",
    category: "control",
  },
  {
    id: "CONTROL_STOP",
    selector: "stopScripts",
    spec: "stop %1",
    inputs: ["%m.stop"],
    shape: "cap",
    category: "control",
  },
  {
    id: "snap:doRun",
    snap: "doRun",
    spec: "run %1 {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "with inputs %2 {inputs}",
      ],
      inputs: [
        "%2 {inputs}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:fork",
    snap: "fork",
    spec: "launch %1 {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "with inputs %2 {inputs}",
      ],
      inputs: [
        "%2 {inputs}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:evaluate",
    snap: "evaluate",
    spec: "call %1 {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "with inputs %2 {inputs}",
      ],
      inputs: [
        "%2 {inputs}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:reportPipe",
    snap: "reportPipe",
    spec: "pipe %1 @arrowRight {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "%2 {expanded}",
      ],
      expanded: [
        "%2 {expanded}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:doTellTo",
    snap: "doTellTo",
    spec: "tell %1 to %2 {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "with inputs %3 {inputs}",
      ],
      inputs: [
        "%3 {inputs}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%m.sprites", "%s", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:reportAskFor",
    snap: "reportAskFor",
    spec: "ask %1 for %2 {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "with inputs %3 {inputs}",
      ],
      inputs: [
        "%3 {inputs}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%m.sprites", "%s", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "CONTROL_STARTASCLONE",
    selector: "whenCloned",
    snap: "receiveOnClone",
    spec: "when I start as a clone",
    inputs: [],
    shape: "hat",
    santa: "pretzel",
    category: "control",
  },
  {
    id: "CONTROL_CREATECLONEOF",
    selector: "createCloneOf",
    spec: "create clone of %1",
    inputs: ["%m.spriteOnly"],
    shape: "stack",
    category: "control",
  },
  {
    snap: "createClone",
    spec: "create a clone of %1",
    inputs: ["%m.spriteOnly"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:newClone",
    snap: "newClone",
    spec: "a new clone of %1",
    inputs: ["%m.spriteOnly"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "CONTROL_DELETETHISCLONE",
    selector: "deleteClone",
    snap: "removeClone",
    spec: "delete this clone",
    inputs: [],
    shape: "cap",
    category: "control",
  },
  {
    id: "snap:doPauseAll",
    snap: "doPauseAll",
    spec: "pause all @pause",
    inputs: [],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:doSwitchToScene",
    snap: "doSwitchToScene",
    spec: "switch to scene %1 {message}",
    specDefs: {
      message: ["@addInput", "and send %2 {data}"],
      data: ["@delInput @addInput", "with data %3 @delInput"],
    },
    inputs: ["%m", "%m.messages", "%s"],
    shape: "cap",
    category: "control",
  },
  {
    id: "snap:receiveUserEdit",
    snap: "receiveUserEdit",
    spec: "when %1 is edited {data}",
    specDefs: {
      data: ["@addInput", "%2 @delInput"],
    },
    inputs: ["%m", "%s"],
    shape: "hat",
    santa: "letter",
    category: "events",
  },
  {
    id: "snap:doDefineBlock",
    snap: "doDefineBlock",
    spec: "define %1 %2 %3",
    inputs: ["%s", "%s", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:doDeleteBlock",
    snap: "doDeleteBlock",
    spec: "delete block %1",
    inputs: ["%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:doSetBlockAttribute",
    snap: "doSetBlockAttribute",
    spec: "set %1 of block %2 to %3",
    inputs: ["%m", "%s", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:reportBlockAttribute",
    snap: "reportBlockAttribute",
    spec: "%1 of block %2",
    inputs: ["%m", "%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:reportEnvironment",
    snap: "reportEnvironment",
    spec: "this {script}",
    specDefs: {
      script: ["script", "%1"],
    },
    inputs: ["%m"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:receiveMenuRequest",
    snap: "receiveMenuRequest",
    spec: "when slot %1 menu clicked",
    inputs: ["%m"],
    shape: "hat",
    category: "control",
  },
  {
    id: "snap:snap:receiveSlotEdit",
    snap: "receiveSlotEdit",
    spec: "when slot %1 edited",
    inputs: ["%m"],
    shape: "hat",
    category: "control",
  },
  {
    id: "snap:receiveSlotEvent",
    snap: "receiveSlotEvent",
    spec: "when slot %1 {signals} %2",
    specDefs: {
      signals: ["gets", "signals"],
    },
    inputs: ["%m", "m"],
    shape: "hat",
    santa: "train",
    category: "control",
  },
  {
    id: "snap:doSetSlot",
    snap: "doSetSlot",
    spec: "set slot %1 to %2",
    inputs: ["%m", "%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:doExpandSlot",
    snap: "doExpandSlot",
    spec: "expand %1 to %2 slots",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:getLastMessage",
    snap: "getLastMessage",
    spec: "message",
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:reportHyperZip",
    snap: "reportHyperZip",
    spec: "zip %1 inputs: \n %2 leaf-rank %3 \n %4 leaf-rank %5",
    inputs: ["%s", "%s", "%n", "%s", "%n"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "snap:doCallCC",
    snap: "doCallCC",
    spec: "run %1 w/continuation",
    inputs: ["%s"],
    shape: "stack",
    category: "control",
  },
  {
    id: "snap:reportCallCC",
    snap: "reportCallCC",
    spec: "call %1 w/continuation",
    inputs: ["%s"],
    shape: "reporter",
    category: "control",
  },
  {
    id: "CONTROL_WHILE",
    spec: "while %1 %2",
    inputs: ["%b", "%cs"],
    shape: "stack",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "CONTROL_FOR_EACH",
    spec: "for each %1 in %2 %3",
    inputs: ["%m", "%n", "%cs"],
    shape: "stack",
    category: "control",
  },
  {
    id: "CONTROL_GET_COUNTER",
    spec: "counter",
    inputs: [],
    shape: "reporter",
    category: "control",
  },
  {
    id: "CONTROL_INCR_COUNTER",
    spec: "increment counter",
    inputs: [],
    shape: "stack",
    category: "control",
  },
  {
    id: "CONTROL_CLEAR_COUNTER",
    spec: "clear counter",
    inputs: [],
    shape: "stack",
    category: "control",
  },
  {
    id: "SENSING_ASKANDWAIT",
    selector: "doAsk",
    snap: "doAsk",
    spec: "ask %1 and wait",
    inputs: ["%s"],
    shape: "stack",
    category: "sensing",
  },
  {
    id: "videoSensing.videoToggle",
    selector: "setVideoState",
    spec: "turn video %1",
    inputs: ["%m.videoState"],
    shape: "stack",
    category: "video",
  },
  {
    id: "videoSensing.setVideoTransparency",
    selector: "setVideoTransparency",
    snap: "doSetVideoTransparency",
    spec: "set video transparency to {input}",
    specDefs: {
      input: ["%1 %", "%1"],
    },
    inputs: ["%n"],
    shape: "stack",
    category: "video",
  },
  {
    id: "snap:reportGlobalFlag",
    snap: "reportGlobalFlag",
    spec: "is %1 on?",
    inputs: ["%m"],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "snap:doSetGlobalFlag",
    snap: "doSetGlobalFlag",
    spec: "set %1 to %2",
    inputs: ["%m", "%b"],
    shape: "stack",
    category: "sensing",
  },
  {
    id: "videoSensing.whenMotionGreaterThan",
    spec: "when video motion > %1",
    inputs: ["%n"],
    shape: "hat",
    category: "video",
  },
  {
    id: "SENSING_RESETTIMER",
    selector: "timerReset",
    snap: "doResetTimer",
    spec: "reset timer",
    inputs: [],
    shape: "stack",
    category: "sensing",
  },
  {
    id: "DATA_SETVARIABLETO",
    selector: "setVar:to:",
    snap: "doSetVar",
    spec: "set %1 to %2",
    inputs: ["%m.var", "%s"],
    shape: "stack",
    category: "variables",
  },
  {
    id: "DATA_CHANGEVARIABLEBY",
    selector: "changeVar:by:",
    snap: "doChangeVar",
    spec: "change %1 by %2",
    inputs: ["%m.var", "%n"],
    shape: "stack",
    category: "variables",
  },
  {
    id: "DATA_SHOWVARIABLE",
    selector: "showVariable:",
    snap: "doShowVar",
    spec: "show variable %1",
    inputs: ["%m.var"],
    shape: "stack",
    category: "variables",
  },
  {
    id: "DATA_HIDEVARIABLE",
    selector: "hideVariable:",
    snap: "doHideVar",
    spec: "hide variable %1",
    inputs: ["%m.var"],
    shape: "stack",
    category: "variables",
  },
  {
    id: "snap:doDeclareVariables",
    snap: "doDeclareVariables",
    spec: "script variables {vars}",
    specDefs: {
      vars: ["%1 @addInput", "%1 {multi}"],
      multi: ["%1 {multi}", "%1 @delInput @addInput"],
    },
    inputs: ["%s", "%s"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:doDeleteAttr",
    snap: "doDeleteAttr",
    spec: "inherit %1",
    inputs: ["%m.var"],
    shape: "stack",
    category: "variables",
  },
  {
    id: "snap:reportNewList",
    snap: "reportNewList",
    spec: "list {list}",
    specDefs: {
      list: ["@addInput", "{multi}"],
      multi: ["%1 {multi}", "%1 @delInput @addInput"],
    },
    inputs: ["%s"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportNumbers",
    snap: "reportNumbers",
    spec: "numbers from %1 to %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportCONS",
    snap: "reportCONS",
    spec: "%1 in front of {list}",
    specDefs: {
      list: ["@list", "%2"],
    },
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportCDR",
    snap: "reportCDR",
    spec: "all but first of {list}",
    specDefs: { list: ["@list", "%2"] },
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:doForEach",
    snap: "doForEach",
    spec: "for each %1 in {list} %3",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%s", "%m.list", "%cs"],
    shape: "stack",
    category: "lists",
    hasLoopArrow: true,
  },
  {
    id: "DATA_ADDTOLIST",
    selector: "append:toList:",
    snap: "doAddToList",
    spec: "add %1 to {list}",
    specDefs: { list: ["@list", "%2"] },
    inputs: ["%s", "%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_DELETEOFLIST",
    selector: "deleteLine:ofList:",
    snap: "doDeleteFromList",
    spec: "delete %1 of {list}",
    specDefs: { list: ["@list", "%2"] },
    inputs: ["%d.listDeleteItem", "%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_DELETEALLOFLIST",
    spec: "delete all of %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "MOTION_IFONEDGEBOUNCE",
    snap: "bounceOffEdge",
    selector: "bounceOffEdge",
    spec: "if on edge, bounce",
    inputs: [],
    shape: "stack",
    category: "motion",
  },
  {
    selector: "motorOnFor:elapsed:from:",
    spec: "motor on for %1 secs",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    selector: "allMotorsOn",
    spec: "motor on",
    inputs: [],
    shape: "stack",
    category: "motion",
  },
  {
    selector: "allMotorsOff",
    spec: "motor off",
    inputs: [],
    shape: "stack",
    category: "motion",
  },
  {
    selector: "startMotorPower:",
    spec: "motor power %1",
    inputs: ["%n"],
    shape: "stack",
    category: "motion",
  },
  {
    selector: "setMotorDirection:",
    spec: "motor direction %1",
    inputs: ["%m"],
    shape: "stack",
    category: "motion",
  },
  {
    id: "DATA_INSERTATLIST",
    selector: "insert:at:ofList:",
    snap: "doInsertInList",
    spec: "insert %1 at %2 of {list}",
    specDefs: { list: ["@list", "%3"] },
    inputs: ["%s", "%d.listItem", "%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_REPLACEITEMOFLIST",
    selector: "setLine:ofList:to:",
    snap: "doReplaceInList",
    spec: "replace item %1 of {list} with %3",
    specDefs: { list: ["@list", "%3"] },
    inputs: ["%d.listItem", "%m.list", "%s"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_SHOWLIST",
    selector: "showList:",
    spec: "show list %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_HIDELIST",
    selector: "hideList:",
    spec: "hide list %1",
    inputs: ["%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    snap: "getPosition",
    spec: "position",
    inputs: [],
    shape: "reporter",
    category: "motion",
  },
  {
    id: "SENSING_OF_XPOSITION",
    snap: "xPosition",
    selector: "xpos",
    spec: "x position",
    inputs: [],
    shape: "reporter",
    category: "motion",
  },
  {
    id: "SENSING_OF_YPOSITION",
    snap: "yPosition",
    selector: "ypos",
    spec: "y position",
    inputs: [],
    shape: "reporter",
    category: "motion",
  },
  {
    id: "SENSING_OF_DIRECTION",
    snap: "direction",
    selector: "heading",
    spec: "direction",
    inputs: [],
    shape: "reporter",
    category: "motion",
  },
  {
    id: "SENSING_OF_COSTUMENUMBER",
    snap: "getCostumeIdx",
    selector: "costumeIndex",
    spec: "costume #",
    inputs: [],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "LOOKS_COSTUMENUMBERNAME",
    selector: "LOOKS_COSTUMENUMBERNAME",
    spec: "costume %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "SENSING_OF_SIZE",
    snap: "getScale",
    selector: "scale",
    spec: "size",
    inputs: [],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "SENSING_OF_BACKDROPNAME",
    selector: "sceneName",
    spec: "backdrop name",
    inputs: [],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "LOOKS_BACKDROPNUMBERNAME",
    spec: "backdrop %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "SENSING_OF_BACKDROPNUMBER",
    selector: "backgroundIndex",
    spec: "backdrop #",
    inputs: [],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "SOUND_VOLUME",
    selector: "volume",
    spec: "volume",
    snap: "volume",
    inputs: [],
    shape: "reporter",
    category: "sound",
  },
  {
    id: "music.getTempo",
    selector: "tempo",
    spec: "tempo",
    snap: "tempo",
    inputs: [],
    shape: "reporter",
    category: "music",
  },
  {
    id: "SENSING_TOUCHINGOBJECT",
    selector: "touching:",
    snap: "reportTouchingObject",
    spec: "touching %1?",
    inputs: ["%m.touching"],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "SENSING_TOUCHINGCOLOR",
    selector: "touchingColor:",
    snap: "reportTouchingColor",
    spec: "touching color %1?",
    inputs: ["%c"],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "SENSING_COLORISTOUCHINGCOLOR",
    selector: "color:sees:",
    snap: "reportColorIsTouchingColor",
    spec: "color %1 is touching %2?",
    inputs: ["%c", "%c"],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "SENSING_DISTANCETO",
    selector: "distanceTo:",
    spec: "distance to %1",
    inputs: ["%m.spriteOrMouse"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_ANSWER",
    selector: "answer",
    snap: "getLastAnswer",
    spec: "answer",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_KEYPRESSED",
    selector: "keyPressed:",
    snap: "reportKeyPressed",
    spec: "key %1 pressed?",
    inputs: ["%m.key"],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "snap:reportRelationTo",
    snap: "reportRelationTo",
    spec: "%1 to %2",
    inputs: ["%m", "%m.spriteOrMouse"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportAspect",
    snap: "reportAspect",
    spec: "%1 at %2",
    inputs: ["%m", "%m.spriteOrMouse"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_MOUSEDOWN",
    selector: "mousePressed",
    snap: "reportMouseDown",
    spec: "mouse down?",
    inputs: [],
    shape: "boolean",
    category: "sensing",
  },
  {
    id: "snap:reportMousePosition",
    snap: "reportMousePosition",
    spec: "mouse position",
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_MOUSEX",
    selector: "mouseX",
    snap: "reportMouseX",
    spec: "mouse x",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_MOUSEY",
    selector: "mouseY",
    snap: "reportMouseY",
    spec: "mouse y",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_SETDRAGMODE",
    spec: "set drag mode %1",
    inputs: ["%m"],
    shape: "stack",
    category: "sensing",
  },
  {
    id: "SENSING_LOUDNESS",
    selector: "soundLevel",
    spec: "loudness",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "videoSensing.videoOn",
    selector: "senseVideoMotion",
    snap: "reportVideo",
    spec: "video %1 on %2",
    inputs: ["%m.videoMotionType", "%m.stageOrThis"],
    shape: "reporter",
    category: "video",
  },
  {
    id: "SENSING_TIMER",
    selector: "timer",
    snap: "getTimer",
    spec: "timer",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_OF",
    selector: "getAttribute:of:",
    snap: "reportAttributeOf",
    spec: "%1 of %2",
    inputs: ["%m.attribute", "%m.spriteOrStage"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportGet",
    snap: "reportGet",
    spec: "my %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "sensing",
  },
  {
    selector: "get:",
    spec: "attribute %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportObject",
    snap: "reportObject",
    spec: "object %1",
    inputs: ["%m.spriteOrStage"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportURL",
    snap: "reportURL",
    spec: "url %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportAudio",
    snap: "reportAudio",
    spec: "microphone %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_CURRENT",
    selector: "timeAndDate",
    snap: "reportDate",
    spec: "current %1",
    inputs: ["%m.timeAndDate"],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_DAYSSINCE2000",
    selector: "timestamp",
    spec: "days since 2000",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "SENSING_USERNAME",
    selector: "getUserName",
    spec: "username",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportThreadCount",
    snap: "reportThreadCount",
    spec: "processes",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportStackSize",
    snap: "reportStackSize",
    spec: "stack size",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    snap: "reportFrameCount",
    spec: "frames",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:reportYieldCount",
    snap: "reportYieldCount",
    spec: "yields",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "OPERATORS_ADD",
    selector: "+",
    snap: "reportVariadicSum",
    spec: "{sum}",
    specDefs: {
      sum: [
        "%1 + %2",
        "sum %1",
        "sum @addInput",
        "sum @verticalEllipsis @addInput",
        "%1 + %2 {add}",
      ],
      add: [
        "+ %2 {add}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_SUBTRACT",
    selector: "-",
    snap: "reportDifference",
    spec: "%1 {minus} %2",
    specDefs: {
      minus: ["-", "−"],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_MULTIPLY",
    selector: "*",
    snap: "reportVariadicProduct",
    spec: "{product}",
    specDefs: {
      product: [
        "%1 {operator} %2",
        "product %1",
        "product @addInput",
        "product @verticalEllipsis @addInput",
        "%1 {operator} %2 {add}",
      ],
      add: [
        "{operator} %2 {add}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
      operator: ["*", "×", "x"],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_DIVIDE",
    selector: "/",
    snap: "reportQuotient",
    spec: "%1 / %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportPower",
    snap: "reportPower",
    spec: "%1 ^ %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportVariadicMin",
    snap: "reportVariadicMin",
    spec: "{minimum}",
    specDefs: {
      minimum: [
        "%1 min %2",
        "minimum %1",
        "minimum @addInput",
        "minimum @verticalEllipsis @addInput",
        "%1 min %2 {min}",
      ],
      min: [
        "min %2 {min}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportVariadicMax",
    snap: "reportVariadicMax",
    spec: "{maximum}",
    specDefs: {
      maximum: [
        "%1 max %2",
        "maximum %1",
        "maximum @addInput",
        "maximum @verticalEllipsis @addInput",
        "%1 max %2 {max}",
      ],
      max: [
        "max %2 {max}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_RANDOM",
    selector: "randomFrom:to:",
    snap: "reportRandom",
    spec: "pick random %1 to %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_LT",
    selector: "<",
    snap: "reportVariadicLessThan",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 < %2",
        "all < %1",
        "all < @addInput",
        "all < @verticalEllipsis @addInput",
        "%1 < %2 {less}",
      ],
      less: [
        "< %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_EQUALS",
    selector: "=",
    snap: "reportVariadicEquals",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 = %2",
        "all = %1",
        "all = @addInput",
        "all = @verticalEllipsis @addInput",
        "%1 = %2 {less}",
      ],
      less: [
        "= %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_GT",
    selector: ">",
    snap: "reportVariadicGreaterThan",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 > %2",
        "all > %1",
        "all > @addInput",
        "all > @verticalEllipsis @addInput",
        "%1 > %2 {less}",
      ],
      less: [
        "> %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "snap:reportVariadicLessThanOrEquals",
    snap: "reportVariadicLessThanOrEquals",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 {operator} %2",
        "all {operator} %1",
        "all {operator} @addInput",
        "all {operator} @verticalEllipsis @addInput",
        "%1 {operator} %2 {less}",
      ],
      less: [
        "{operator} %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
      operator: ["<=", "≤"],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "snap:reportVariadicNotEquals",
    snap: "reportVariadicNotEquals",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 {operator} %2",
        "neighbors {operator} %1",
        "neighbors {operator} @addInput",
        "neighbors {operator} @verticalEllipsis @addInput",
        "%1 {operator} %2 {less}",
      ],
      less: [
        "{operator} %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
      operator: ["!=", "≠"],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "snap:reportVariadicGreaterThanOrEquals",
    snap: "reportVariadicGreaterThanOrEquals",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 {operator} %2",
        "all {operator} %1",
        "all {operator} @addInput",
        "all {operator} @verticalEllipsis @addInput",
        "%1 {operator} %2 {less}",
      ],
      less: [
        "{operator} %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
      operator: [">=", "≥"],
    },
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_AND",
    selector: "&",
    snap: "reportVariadicAnd",
    spec: "{all}",
    specDefs: {
      all: [
        "%1 and %2",
        "all %1",
        "all @addInput",
        "all @verticalEllipsis @addInput",
        "%1 and %2 {less}",
      ],
      less: [
        "and %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%b", "%b"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_OR",
    selector: "|",
    snap: "reportVariadicOr",
    spec: "{any}",
    specDefs: {
      any: [
        "%1 or %2",
        "any %1",
        "any @addInput",
        "any @verticalEllipsis @addInput",
        "%1 or %2 {less}",
      ],
      less: [
        "or %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%b", "%b"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_NOT",
    selector: "not",
    snap: "reportNot",
    spec: "not %1",
    inputs: ["%b"],
    shape: "boolean",
    category: "operators",
  },
  {
    selector: "getTrue",
    spec: "true",
    inputs: [],
    shape: "boolean",
    category: "operators",
  },
  {
    selector: "getFalse",
    spec: "false",
    inputs: [],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "OPERATORS_JOIN",
    selector: "concatenate:with:",
    snap: "reportJoinWords",
    spec: "join {closed}",
    specDefs: {
      closed: [
        "%1 %2",
        "%1",
        "input list: %1",
        "@verticalEllipsis @addInput",
        "@addInput",
        "{info}",
      ],
      info: [
        "%1 {info}",
        "%1 @delInput @addInput",
        "%1 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportTextSplit",
    snap: "reportTextSplit",
    spec: "split %1 by %2",
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_LETTEROF",
    selector: "letter:of:",
    snap: "reportLetter",
    spec: "letter %1 of %2",
    inputs: ["%n", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_LENGTH",
    selector: "stringLength:",
    spec: "length of %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportTextAttribute",
    snap: "reportTextAttribute",
    spec: "%1 of text %2",
    inputs: ["%m", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportUnicode",
    snap: "reportUnicode",
    spec: "unicode of %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportUnicodeAsLetter",
    snap: "reportUnicodeAsLetter",
    spec: "unicode %1 as letter",
    inputs: ["%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportIsA",
    snap: "reportIsA",
    spec: "is %1 a %2 ?",
    inputs: ["%s", "%m"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "snap:reportVariadicIsIdentical",
    snap: "reportVariadicIsIdentical",
    spec: "is {all} ?",
    specDefs: {
      all: [
        "%1 identical to %2",
        "all identical %1",
        "all identical @addInput",
        "all identical @verticalEllipsis @addInput",
        "%1 identical to %2 {less}",
      ],
      less: [
        "identical to %2 {less}",
        "@delInput @addInput",
        "@delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%b", "%b"],
    shape: "boolean",
    category: "operators",
  },
  {
    id: "snap:reportJSFunction",
    snap: "reportJSFunction",
    spec: "JavaScript function ( {parameters} ) { %2 }",
    specDefs: {
      parameters: [
        "%1",
        "input list: %1",
        "@addInput",
        "@verticalEllipsis @addInput",
        "{variadic}",
      ],
      variadic: [
        "%1 {variadic}",
        "%1 @delInput @addInput",
        "%1 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportTypeOf",
    snap: "reportTypeOf",
    spec: "type of %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportTextFunction",
    snap: "reportTextFunction",
    spec: "%1 of %2",
    inputs: ["%m", "%s"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_MOD",
    selector: "%",
    snap: "reportModulus",
    spec: "%1 mod %2",
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_ROUND",
    selector: "rounded",
    snap: "reportRound",
    spec: "round %1",
    inputs: ["%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_MATHOP",
    selector: "computeFunction:of:",
    snap: "reportMonadic",
    spec: "%1 of %2",
    inputs: ["%m.mathOp", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "snap:reportAtan2",
    snap: "reportAtan2",
    spec: "atan2 %1 {operator} %2",
    specDefs: {
      operator: ["/", "÷"],
    },
    inputs: ["%n", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "OPERATORS_CONTAINS",
    spec: "%1 contains %2?",
    inputs: ["%s", "%s"],
    shape: "boolean",
    category: "operators",
  },
  {
    snap: "reportScript",
    spec: "the script. {input} %2",
    specDefs: {
      input: ["@addInput", "Input names: {names} @delInput @addInput"],
      names: ["%1", "%1 {names}"],
    },
    inputs: ["%s", "%cs"],
    shape: "ring",
    category: "operators",
  },
  {
    snap: "reify",
    spec: "the %1 block. {input}",
    specDefs: {
      input: ["@addInput", "Input names: {names} @delInput @addInput"],
      names: ["%1", "%1 {names}"],
    },
    inputs: ["%r", "%s"],
    shape: "ring",
    category: "operators",
  },
  {
    selector: "spawn",
    spec: "clone",
    inputs: [],
    shape: "reporter",
    category: "operators",
  },
  {
    snap: "reportCompiled",
    spec: "compile %1 for %2 args",
    inputs: ["%r", "%n"],
    shape: "reporter",
    category: "operators",
  },
  {
    id: "DATA_ITEMOFLIST",
    selector: "getLine:ofList:",
    snap: "reportListItem",
    spec: "item %1 of {list}",
    specDefs: {
      list: ["@list", "%2"],
    },
    inputs: ["%d.listItem", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "DATA_ITEMNUMOFLIST",
    spec: "item # of %1 in %2",
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportListIndex",
    snap: "reportListIndex",
    spec: "index of %1 in {list}",
    specDefs: { list: ["@list", "%2"] },
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "DATA_LENGTHOFLIST",
    selector: "lineCountOfList:",
    spec: "length of {list}",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportListAttribute",
    snap: "reportListAttribute",
    spec: "%1 of {list}",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportConcatenatedLists",
    snap: "reportConcatenatedLists",
    spec: "append {append}",
    specDefs: {
      append: [
        "%1",
        "input list: %1",
        "@addInput",
        "@verticalEllipsis @addInput",
        "{lists}",
      ],
      lists: [
        "{list} {lists}",
        "{list} @delInput @addInput",
        "{list} @delInput @verticalEllipsis @addInput",
      ],
      list: ["%1", "@list"],
    },
    inputs: ["%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportReshape",
    spec: "reshape %1 to {closed}",
    specDefs: {
      closed: [
        "%2",
        "input list: %2",
        "@addInput",
        "@verticalEllipsis @addInput",
        "{shape}",
      ],
      shape: [
        "%2 {shape}",
        "%2 @delInput @addInput",
        "%2 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%s", "%n"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportCrossproduct",
    snap: "reportCrossproduct",
    spec: "combinations {closed}",
    specDefs: {
      closed: [
        "input list: %1",
        "@addInput",
        "@verticalEllipsis @addInput",
        "{lists}",
      ],
      lists: [
        "{list} {lists}",
        "{list} @delInput @addInput",
        "{list} @delInput @verticalEllipsis @addInput",
      ],
      list: ["%2", "@list"],
    },
    inputs: ["%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    snap: "doShowTable",
    spec: "show table {list}",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m.list"],
    shape: "stack",
    category: "lists",
  },
  {
    id: "DATA_LISTCONTAINSITEM",
    selector: "list:contains:",
    snap: "reportListContainsItem",
    spec: "{list} contains {input}",
    specDefs: { list: ["@list", "%1"], input: ["%1 ?", "%1"] },
    inputs: ["%m.list", "%s"],
    shape: "boolean",
    category: "lists",
  },
  {
    selector: "contentsOfList:",
    spec: "%1 as text",
    inputs: ["%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    selector: "copyOfList:",
    spec: "copy of {list}",
    specDefs: {
      list: ["@list", "%1"],
    },
    inputs: ["%s"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportListIsEmpty",
    snap: "reportListIsEmpty",
    spec: "is {list} empty?",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m.list"],
    shape: "boolean",
    category: "lists",
  },
  {
    id: "snap:reportMap",
    snap: "reportMap",
    spec: "map %1 over {list}",
    specDefs: { list: ["@list", "%2"] },
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportKeep",
    snap: "reportKeep",
    spec: "keep items %1 from {list}",
    specDefs: { list: ["@list", "%2"] },
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportFindFirst",
    snap: "reportFindFirst",
    spec: "{blitz} find first item %1 in {list}",
    specDefs: { blitz: ["", "@blitz"], list: ["@list", "%2"] },
    inputs: ["%s", "%m.list"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:reportCombine",
    snap: "reportCombine",
    spec: "combine {list} using %2",
    specDefs: { list: ["@list", "%1"] },
    inputs: ["%m.list", "%s"],
    shape: "reporter",
    category: "lists",
  },
  {
    id: "snap:doMapCodeOrHeader",
    snap: "doMapCodeOrHeader",
    spec: "map %1 to %2 %3",
    inputs: ["%s", "%m", "%s"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:doMapValueCode",
    snap: "doMapValueCode",
    spec: "map %1 to code %2",
    inputs: ["%m", "%s"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:doMapListCode",
    snap: "doMapListCode",
    spec: "map %1 of %2 to code %3",
    inputs: ["%m", "%m", "%s"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:reportMappedCode",
    snap: "reportMappedCode",
    spec: "code of %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "other",
  },
  {
    snap: "doPrimitive",
    spec: "%1 primitive %2",
    inputs: ["%b", "%m"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:doApplyExtension",
    snap: "doApplyExtension",
    spec: "{name} %1 {closed}",
    specDefs: {
      name: ["extension", "primitive"],
      closed: [
        "%2",
        "input list: %2",
        "@verticalEllipsis @addInput",
        "@addInput",
        "{info}",
      ],
      info: [
        "%2 {info}",
        "%2 @delInput @addInput",
        "%2 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%m", "%s"],
    shape: "stack",
    category: "other",
  },
  {
    id: "snap:reportApplyExtension",
    snap: "reportApplyExtension",
    spec: "{name} %1 {closed}",
    specDefs: {
      name: ["extension", "primitive"],
      closed: [
        "%2",
        "input list: %2",
        "@verticalEllipsis @addInput",
        "@addInput",
        "{info}",
      ],
      info: [
        "%2 {info}",
        "%2 @delInput @addInput",
        "%2 @delInput @verticalEllipsis @addInput",
      ],
    },
    inputs: ["%m", "%s"],
    shape: "reporter",
    category: "other",
  },
  {
    id: "scratchblocks:end",
    spec: "end",
    inputs: [],
    shape: "cend",
    category: "control",
  },
  {
    id: "scratchblocks:ellipsis",
    spec: ". . .",
    inputs: [],
    shape: "stack",
    category: "grey",
  },
  {
    id: "scratchblocks:ellipsis_reporter",
    spec: ". . .",
    inputs: [],
    shape: "reporter",
    category: "grey",
  },
  {
    id: "scratchblocks:ellipsis_boolean",
    spec: ". . .",
    inputs: [],
    shape: "boolean",
    category: "grey",
  },
  {
    id: "snap:ring",
    spec: "%1 {add}",
    specDefs: {
      add: ["@addInput", "input names: {vars}"],
      vars: ["%2 {vars}", "%2 @delInput @addInput"],
    },
    inputs: ["%n", "%c"],
    shape: "ring",
    category: "other",
  },
  {
    id: "SENSING_USERID",
    spec: "user id",
    inputs: [],
    shape: "reporter",
    category: "sensing",
  },
  {
    id: "snap:doIf",
    selector: "doIf",
    snap: "doIf",
    spec: "{base}",
    specDefs: {
      base: ["if %1 %2", "if %1 %2 @addInput", "if %1 %2 {else}"],
      if: ["if %1 %2 @delInput @addInput", "if %1 %2 {else}"],
      else: ["else {if}"],
    },
    inputs: ["%b", "%cs"],
    shape: "stack",
    category: "control",
  },
  {
    selector: "doForeverIf",
    spec: "forever if %1 %2",
    inputs: ["%b", "%cs"],
    shape: "cap",
    category: "control",
    hasLoopArrow: true,
  },
  {
    id: "CONTROL_ALL_AT_ONCE",
    spec: "all at once %1",
    inputs: ["%cs"],
    shape: "stack",
    category: "control",
  },
  {
    selector: "doReturn",
    spec: "stop script",
    inputs: [],
    shape: "cap",
    category: "control",
  },
  {
    selector: "stopAll",
    spec: "stop all @stopSign",
    inputs: [],
    shape: "cap",
    category: "control",
  },
  {
    selector: "doStopBlock",
    spec: "stop block",
    inputs: [],
    shape: "cap",
    category: "control",
  },
  {
    selector: "doPauseThreadReporter",
    spec: "debug %1",
    inputs: ["%s"],
    shape: "reporter",
    category: "control",
  },
  {
    selector: "doPauseThread",
    spec: "debug",
    inputs: [],
    shape: "stack",
    category: "control",
  },
  {
    snap: "doSwitchToCostume",
    selector: "lookLike:",
    snap: "doSwitchToCostume",
    spec: "switch to costume %1",
    inputs: ["%m.costume"],
    shape: "stack",
    category: "looks",
  },
  {
    selector: "nextScene",
    spec: "next background",
    inputs: [],
    shape: "stack",
    category: "looks",
  },
  {
    selector: "startScene",
    spec: "switch to background %1",
    inputs: ["%m.backdrop"],
    shape: "stack",
    category: "looks",
  },
  {
    selector: "backgroundIndex",
    spec: "background #",
    inputs: [],
    shape: "reporter",
    category: "looks",
  },
  {
    id: "SENSING_LOUD",
    selector: "isLoud",
    spec: "loud?",
    inputs: [],
    shape: "boolean",
    category: "sensing",
  },
  // TODO define
  {
    selector: "whenSensorConnected",
    spec: "when %1",
    inputs: ["%m.booleanSensor"],
    shape: "hat",
    category: "pico",
  },
  {
    selector: "whenSensorPass",
    spec: "when %1 %2 %3",
    inputs: ["%m.sensor", "%m.lessMore", "%n"],
    shape: "hat",
    category: "pico",
  },
  {
    selector: "sensorPressed",
    spec: "sensor %1 ?",
    inputs: ["%m.booleanSensor"],
    shape: "boolean",
    category: "pico",
  },
  {
    selector: "sensor",
    spec: "%1 sensor value",
    inputs: ["%m.sensor"],
    shape: "reporter",
    category: "pico",
  },
  {
    id: "text2speech.speakAndWaitBlock",
    spec: "speak %1",
    inputs: ["%s"],
    shape: "stack",
    category: "tts",
  },
  {
    id: "text2speech.setVoiceBlock",
    spec: "set voice to %1",
    inputs: ["%m"],
    shape: "stack",
    category: "tts",
  },
  {
    id: "text2speech.setLanguageBlock",
    spec: "set language to %1",
    inputs: ["%m"],
    shape: "stack",
    category: "tts",
  },
  {
    id: "translate.translateBlock",
    spec: "translate %1 to %2",
    inputs: ["%s", "%m"],
    shape: "reporter",
    category: "translate",
  },
  {
    id: "translate.viewerLanguage",
    spec: "language",
    shape: "reporter",
    category: "translate",
  },
  {
    id: "makeymakey.whenKeyPressed",
    spec: "when %1 key pressed",
    inputs: ["%m"], // this is not %m.key
    shape: "hat",
    category: "makeymakey",
  },
  {
    spec: "when %1 pressed in order",
    id: "makeymakey.whenKeysPressedInOrder",
    inputs: ["%m"],
    shape: "hat",
    category: "makeymakey",
  },
  {
    id: "microbit.whenButtonPressed",
    spec: "when %1 button pressed",
    inputs: ["%m"],
    shape: "hat",
    category: "microbit",
  },
  {
    id: "microbit.isButtonPressed",
    spec: "%1 button pressed?",
    inputs: ["%m"],
    shape: "boolean",
    category: "microbit",
  },
  {
    id: "microbit.whenGesture",
    spec: "when %1",
    inputs: ["%m"],
    shape: "hat",
    category: "microbit",
  },
  {
    id: "microbit.displaySymbol",
    spec: "display %1",
    inputs: ["%m"], // TODO add matrix support
    shape: "stack",
    category: "microbit",
  },
  {
    id: "microbit.displayText",
    spec: "display text %1",
    inputs: ["%s"],
    shape: "stack",
    category: "microbit",
  },
  {
    id: "microbit.clearDisplay",
    spec: "clear display",
    shape: "stack",
    category: "microbit",
  },
  {
    id: "microbit.whenTilted",
    spec: "when tilted %1",
    inputs: ["%m"],
    shape: "hat",
    category: "microbit",
  },
  {
    id: "microbit.isTilted",
    spec: "tilted %1 ?",
    inputs: ["%m"],
    shape: "boolean",
    category: "microbit",
  },
  {
    id: "microbit.tiltAngle",
    spec: "tilt angle %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "microbit",
  },
  {
    id: "microbit.whenPinConnected",
    spec: "when pin %1 connected",
    inputs: ["%m"],
    shape: "hat",
    category: "microbit",
  },
  {
    id: "ev3.motorTurnClockwise",
    spec: "motor %1 turn this way for %2 seconds",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "ev3",
  },
  {
    id: "ev3.motorTurnCounterClockwise",
    spec: "motor %1 turn that way for %2 seconds",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "ev3",
  },
  {
    id: "ev3.motorSetPower",
    spec: "motor %1 set power %2%",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "ev3",
  },
  {
    id: "ev3.getMotorPosition",
    spec: "motor %1 position",
    inputs: ["%m"],
    shape: "reporter",
    category: "ev3",
  },
  {
    id: "ev3.whenButtonPressed",
    spec: "when button %1 pressed",
    inputs: ["%m"],
    shape: "hat",
    category: "ev3",
  },
  {
    id: "ev3.whenDistanceLessThan",
    spec: "when distance < %1",
    inputs: ["%n"],
    shape: "hat",
    category: "ev3",
  },
  {
    id: "ev3.whenBrightnessLessThan",
    spec: "when brightness < %1",
    inputs: ["%n"],
    shape: "hat",
    category: "ev3",
  },
  {
    id: "ev3.buttonPressed",
    spec: "button %1 pressed?",
    inputs: ["%m"],
    shape: "boolean",
    category: "ev3",
  },
  {
    id: "ev3.getDistance",
    spec: "distance",
    shape: "reporter",
    category: "ev3",
  },
  {
    id: "ev3.getBrightness",
    spec: "brightness",
    shape: "reporter",
    category: "ev3",
  },
  {
    id: "ev3.beepNote",
    spec: "beep note %1 for %2 secs",
    inputs: ["%d.note", "%n"], // we can use %d.note here
    shape: "stack",
    category: "ev3",
  },
  {
    id: "wedo2.motorOn",
    spec: "turn %1 on",
    inputs: ["%m.motor"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.motorOff",
    spec: "turn %1 off",
    inputs: ["%m.motor"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.startMotorPower",
    spec: "set %1 power to %2",
    inputs: ["%m.motor", "%n"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.setMotorDirection",
    spec: "set %1 direction to %2",
    inputs: ["%m.motor2", "%m.motorDirection"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.whenDistance",
    spec: "when distance %1 %2",
    inputs: ["%m.lessMore", "%n"],
    shape: "hat",
    category: "wedo",
  },
  {
    selector: "whenTilt.1",
    spec: "when tilt %1 %2",
    inputs: ["%m.eNe", "%n"],
    shape: "hat",
    category: "wedo",
  },
  {
    id: "wedo2.getDistance",
    spec: "distance",
    inputs: [],
    shape: "reporter",
    category: "wedo",
  },
  {
    selector: "getTilt.1",
    spec: "tilt",
    inputs: [],
    shape: "reporter",
    category: "wedo",
  },
  {
    id: "wedo2.motorOnFor",
    selector: "motorOnFor",
    spec: "turn %1 on for %2 {secs}",
    specDefs: {
      secs: ["secs", "seconds"],
    },
    inputs: ["%m.motor", "%n"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.setLightHue",
    spec: "set light color to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.playNoteFor",
    spec: "play note %1 for %2 seconds",
    inputs: ["%n", "%n"],
    shape: "stack",
    category: "wedo",
  },
  {
    id: "wedo2.whenTilted",
    spec: "when tilted %1",
    inputs: ["%m.xxx"],
    shape: "hat",
    category: "wedo",
  },
  {
    id: "wedo2.isTilted",
    spec: "tilted %1 ?",
    inputs: ["%m"],
    shape: "boolean",
    category: "wedo",
  },
  {
    id: "wedo2.getTiltAngle",
    spec: "tilt angle %1",
    inputs: ["%m.xxx"],
    shape: "reporter",
    category: "wedo",
  },
  {
    id: "gdxfor.whenGesture",
    spec: "when %1",
    inputs: ["%m"],
    shape: "hat",
    category: "gdxfor",
  },
  {
    id: "gdxfor.whenForcePushedOrPulled",
    spec: "when force sensor %1",
    inputs: ["%m"],
    shape: "hat",
    category: "gdxfor",
  },
  {
    id: "gdxfor.getForce",
    spec: "force",
    shape: "reporter",
    category: "gdxfor",
  },
  {
    id: "gdxfor.whenTilted",
    spec: "when tilted %1",
    inputs: ["%m"],
    shape: "hat",
    category: "gdxfor",
  },
  {
    id: "gdxfor.isTilted",
    spec: "tilted %1 ?",
    inputs: ["%m"],
    shape: "boolean",
    category: "gdxfor",
  },
  {
    id: "gdxfor.getTilt",
    spec: "tilt angle %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "gdxfor",
  },
  {
    id: "gdxfor.isFreeFalling",
    spec: "falling?",
    shape: "boolean",
    category: "gdxfor",
  },
  {
    id: "gdxfor.getSpin",
    spec: "spin speed %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "gdxfor",
  },
  {
    id: "gdxfor.getAcceleration",
    spec: "acceleration %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "gdxfor",
  },
  {
    id: "boost.motorOnFor",
    spec: "turn motor %1 for %2 seconds",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.motorOnForRotation",
    spec: "turn motor %1 for %2 rotations",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.motorOn",
    spec: "turn motor %1 on",
    inputs: ["%m"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.motorOff",
    spec: "turn motor %1 off",
    inputs: ["%m"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.setMotorPower",
    spec: "set motor %1 speed to %2%",
    inputs: ["%m", "%n"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.setMotorDirection",
    spec: "set motor %1 direction %2",
    inputs: ["%m", "%m"],
    shape: "stack",
    category: "boost",
  },
  {
    id: "boost.getMotorPosition",
    spec: "motor %1 position",
    inputs: ["%m"],
    shape: "reporter",
    category: "boost",
  },
  {
    id: "boost.whenColor",
    spec: "when %1 brick seen",
    inputs: ["%m"],
    shape: "hat",
    category: "boost",
  },
  {
    id: "boost.seeingColor",
    spec: "seeing %1 brick?",
    inputs: ["%m"],
    shape: "boolean",
    category: "boost",
  },
  {
    id: "boost.whenTilted",
    spec: "when tilted %1",
    inputs: ["%m"],
    shape: "hat",
    category: "boost",
  },
  {
    id: "boost.getTiltAngle",
    spec: "tilt angle %1",
    inputs: ["%m"],
    shape: "reporter",
    category: "boost",
  },
  {
    id: "boost.setLightHue",
    spec: "set light color to %1",
    inputs: ["%n"],
    shape: "stack",
    category: "boost",
  },
]
